{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Med Amine\\\\Desktop\\\\pfe\\\\main web\\\\python\\\\frontendai\\\\src\\\\Context\\\\DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport data from '../'; // Assuming you have a data.json file in your project\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\nexport const useData = () => {\n  _s();\n  return useContext(DataContext);\n};\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const DataProvider = ({\n  children\n}) => {\n  _s2();\n  const [employees, setEmployees] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [equipment, setEquipment] = useState([]);\n  useEffect(() => {\n    // Load the data from data.json or localStorage (fallback)\n    const storedData = JSON.parse(localStorage.getItem('appData')) || data;\n    setEmployees(storedData.employees || []);\n    setUsers(storedData.users || []);\n    setEquipment(storedData.equipment || []);\n  }, []);\n  useEffect(() => {\n    // Save the updated data to localStorage whenever it changes\n    const appData = {\n      employees,\n      users,\n      equipment\n    };\n    localStorage.setItem('appData', JSON.stringify(appData));\n  }, [employees, users, equipment]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      employees,\n      setEmployees,\n      users,\n      setUsers,\n      equipment,\n      setEquipment\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s2(DataProvider, \"hVz6KPaoswhUD7ZJXnO/OVDkAgg=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","data","jsxDEV","_jsxDEV","DataContext","useData","_s","DataProvider","children","_s2","employees","setEmployees","users","setUsers","equipment","setEquipment","storedData","JSON","parse","localStorage","getItem","appData","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Med Amine/Desktop/pfe/main web/python/frontendai/src/Context/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport data from '../'; // Assuming you have a data.json file in your project\r\n\r\nconst DataContext = createContext();\r\n\r\nexport const useData = () => {\r\n  return useContext(DataContext);\r\n};\r\n\r\nexport const DataProvider = ({ children }) => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load the data from data.json or localStorage (fallback)\r\n    const storedData = JSON.parse(localStorage.getItem('appData')) || data;\r\n    setEmployees(storedData.employees || []);\r\n    setUsers(storedData.users || []);\r\n    setEquipment(storedData.equipment || []);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Save the updated data to localStorage whenever it changes\r\n    const appData = {\r\n      employees,\r\n      users,\r\n      equipment\r\n    };\r\n    localStorage.setItem('appData', JSON.stringify(appData));\r\n  }, [employees, users, equipment]);\r\n\r\n  return (\r\n    <DataContext.Provider value={{ employees, setEmployees, users, setUsers, equipment, setEquipment }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,IAAI,MAAM,KAAK,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOR,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAInB,IAAI;IACtEU,YAAY,CAACK,UAAU,CAACN,SAAS,IAAI,EAAE,CAAC;IACxCG,QAAQ,CAACG,UAAU,CAACJ,KAAK,IAAI,EAAE,CAAC;IAChCG,YAAY,CAACC,UAAU,CAACF,SAAS,IAAI,EAAE,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,OAAO,GAAG;MACdX,SAAS;MACTE,KAAK;MACLE;IACF,CAAC;IACDK,YAAY,CAACG,OAAO,CAAC,SAAS,EAAEL,IAAI,CAACM,SAAS,CAACF,OAAO,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACX,SAAS,EAAEE,KAAK,EAAEE,SAAS,CAAC,CAAC;EAEjC,oBACEX,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEf,SAAS;MAAEC,YAAY;MAAEC,KAAK;MAAEC,QAAQ;MAAEC,SAAS;MAAEC;IAAa,CAAE;IAAAP,QAAA,EAChGA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,GAAA,CA5BWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}